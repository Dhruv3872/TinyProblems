import numpy as np

b = "Hello, World!"
print(b[2:5])

b = "Hello, World!"
print(b[-5:-2])

c = b
b = b.upper()
print(b, c)

print(int(9.9))
print(int(round(9.9)))
print(round(9.9))
print(type(round(9.9)))
print(bool("True"))
print(bool("False"))
print(bool("0"))

# Arrays:
colors = ['blue', 'white', 'orange']
print(colors[0])
colors.append('yellow')
colors.pop(1)
colors.remove('orange')
# colors.clear()
print(colors)
solid_colors = colors.copy()
print(solid_colors)
# solid_colors = colors
colors.append('purple')
print(colors)
print(solid_colors)
colors.append('yellow')
print(colors)
print(colors.count('yellow'))
colors.extend(['pink', 'brown', 'grey'])
print(colors)
print(colors.index('yellow'))
print(colors.index('yellow', 3))
colors.remove('yellow')
colors.insert(2,'black')
print(colors)
colors.reverse()
print(colors)
colors.sort()
print(colors)

# numpy arrays:
numbers = np.array([1,2,3,4,5])
print(numbers)
print(np.__version__)
print(type(numbers))
print(numbers.ndim)
numbers2 = np.array([1, 2, 3, 4], ndmin=5)
print(numbers2)
print(numbers[2] + numbers[3])
print(numbers[0:1])
numbers_2d = np.array([[1, 2, 3], [1, 2, 3]])
print(numbers_2d[0:2, 2])
this_array = np.array([1, 2, 3, 4], dtype='i')
print(this_array.dtype)
this_array2 = np.array([1.2, 2.95, 3.3])
print(this_array2.dtype)
this_array2 = this_array2.astype('i')
print(this_array2.dtype)
print(this_array2)
this_array3 = this_array2.copy()
this_array2[2] = 7
print(this_array2)
print(this_array3)
this_array4 = this_array2.view()
this_array2[0]= 9
print(this_array2)
print(this_array4)
print(this_array2.base)
print(this_array3.base)
print(this_array4.base)
array5 = np.array([[1, 2, 3, 4], [1, 3, 5, 7]])
print(array5.shape)
a6 = np.array([1, 2, 3, 4], ndmin=5)
print(a6.shape)
print(a6)
a7 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4, 5])
print(a7.shape)
a8 = a7.reshape(4, 3)
print(a8)
a9 = a7.reshape(2, 3, 2)
print(a9)
# a10 = a7.reshape(2, 3, 3)
print(a9.base)
print(a7)
print(a9.base == a7)
a11 = a7.reshape(2, 2, -1)
print(a11)
a12 = a7.reshape(-1, 2, 2)
a13 = a12.copy()
print(a12, a7, a13)
for x in a7:
    print(x)
# for x in a12:
#     for y in x:
#         for z in y:
#             print(z)
print(np.nditer(a12))
# print(a7)
# print(a7.reshape(-1))
# print(a7)
for x in np.nditer(a12, flags=['buffered'], op_dtypes=['S']):
    print(x)
print(a12)
for idx, x in np.ndenumerate(a12):
    print(idx, x)
print(a7[4:9])
print(a7[1:9:3])
print(a7[:9])
print(a7[4:])
print(a7[::2])
print(a7[1::2])
print(a7[-3:-1])
a14 = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print(a14[1, 1:4])
print(a14[0:2, 2])
print(a14[0:2, 1:4])
# a15 = np.concatenate(a14[0], a14[1])
# print(a15)
print(a14[0])
a16 = np.array([1, 2, 3])
a17 = np.array([4, 5, 6])
a18 = np.concatenate((a16, a17))
print(a18)
a19 = np.array([[1, 2], [3, 4]])
a20 = np.array([[5, 6], [7, 8]])
# print(np.concatenate((a19, a20), 1))
a21 = np.stack((a16, a17), 1)
a22 = np.hstack((a16, a17))
print(a21)
print(a22)
a23 = np.vstack((a16, a17))
print(a23)
# print(a12.shape)
a24 = np.dstack((a16, a17))
print(a24)
a25 = np.concatenate(([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))
print(a25)
a26 = np.array_split(a25, 3)
print(a26)
a27 = np.array([[1, 2],[3, 4],[5, 6],[7, 8]])
a28 = np.array_split(a27, 3)
print(a28)
print(a28[0])
a29 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])
a30 = np.array_split(a29, 3, 1)
# print(np.shape(a30[0]))

# print(a30)
print(np.array_split(a29, 4, 1))
x = np.where(a7 == 6)
print(x)
filter_a7 = a7 > 4
print(filter_a7)
filtered_a7 = a7[filter_a7]
print(filtered_a7)
filter_even = (a7 % 2 == 0)
filtered_even_a7 = a7[filter_even]
print(filtered_even_a7)